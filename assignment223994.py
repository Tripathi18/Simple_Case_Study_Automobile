# -*- coding: utf-8 -*-
"""Assignment223994

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VVOUHCFjn-DebKQjlU-X4B5iIDL3HfOG

**Importing Libraries**
"""

#importing useful libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""**Solution 1:**"""

#load dataset(given in '.csv' form)
df = pd.read_csv('/content/automobile.csv')

#repalcing the '?' value with 'NAN' value
df.replace('?', np.nan, inplace=True)

"""**Solution 2:**"""

#checking the missing values datatypes
columns_missing_value = df.columns[df.isnull().any()]
missing_columns_datatypes = df[columns_missing_value].dtypes
print("Data types of columns with missing values:")
print(missing_columns_datatypes)

"""Not need any data type conversions as all the column with missing values are of same datatpye."""

# Handling the missing values
numeric_columns = df.select_dtypes(include=np.number).columns
for x in numeric_columns:
    medians = df[x].median()
    df[x].fillna(medians, inplace=True)

category_columns = df.select_dtypes(exclude=np.number).columns
for y in category_columns:
    modes = df[y].mode().values[0]
    df[y].fillna(modes, inplace=True)

# Verify if all missing values have been filled
missed_values = df.isnull().sum().sum()
print("Number of missing values after handling: ", missed_values)

"""After resolving the missing values, saving the dataset as new **"csv"** file."""

# Save the cleaned dataset and creating new csv file
df.to_csv('new_automobile.csv', index=False)

"""**Solution 3:**"""

#loading new dataset file for predictions
new_data = pd.read_csv('/content/new_automobile.csv')

# Calculate the correlation matrix
correlation_matrix = new_data.corr()

# Find the features with strong correlation to 'Price'
correlation_feature_cf = correlation_matrix['price'].sort_values(ascending=False)

# Print the correlated features
print("Correlated features to 'Price':")
print(correlation_feature_cf)

"""**Solution 4:**

Use engine-size as independent variable
"""

# Select the independent variable and the target variable
independent_variable = 'engine-size'
target_variable = 'price'

# Split the data into training and testing sets
A_train, A_test, B_train, B_test = train_test_split(new_data[independent_variable], new_data[target_variable], test_size=0.3, random_state=40)

# Reshape the data to match the expected input shape of the model
A_train = A_train.values.reshape(-1, 1)
A_test = A_test.values.reshape(-1, 1)

# Initialize and train the linear regression model
model_1 = LinearRegression()
model_1.fit(A_train, B_train)

# Make predictions on the testing set
y_pred = model_1.predict(A_test)

# Evaluate the model's performance
mse_1 = mean_squared_error(B_test, y_pred)
rmse_1 = mean_squared_error(B_test, y_pred, squared=False)
r2_1 = r2_score(B_test, y_pred)

"""Results of solution 4 after bulding model."""

# Print the evaluation metrics
print("Mean Squared Error (MSE):", mse_1)
print("Root Mean Squared Error (RMSE):", rmse_1)
print("R-squared (R2):", r2_1)

"""**Solution 5:**

Use horsepower as independent variable
"""

# Select the independent variable and the target variable
independent_variable = 'horsepower'
target_variable = 'price'

# Split the data into training and testing sets
A1_train, A1_test, B1_train, B1_test = train_test_split(new_data[independent_variable], new_data[target_variable], test_size=0.3, random_state=40)

# Reshape the data to match the expected input shape of the model
A1_train = A1_train.values.reshape(-1, 1)
A1_test = A1_test.values.reshape(-1, 1)

# Initialize and train the linear regression model
model_2 = LinearRegression()
model_2.fit(A1_train, B1_train)

# Make predictions on the testing set
y_pred = model_2.predict(A1_test)

# Evaluate the model's performance
mse = mean_squared_error(B1_test, y_pred)
rmse = mean_squared_error(B1_test, y_pred, squared=False)
r2 = r2_score(B1_test, y_pred)

"""Results of solution 5"""

# Print the evaluation metrics
print("Mean Squared Error (MSE):", mse)
print("Root Mean Squared Error (RMSE):", rmse)
print("R-squared (R2):", r2)